class Solution {
#define pii pair<int, int>
public:
    bool isValid(int& x, int& y, int& m, int& n) {
        return (x >= 0 and x < m and y >= 0 and y < n);
    }

    vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {
        set<int> sorted_queries(queries.begin(), queries.end());

        unordered_map<int, int> query_count;
        priority_queue<pair<int, pii>, vector<pair<int, pii>>,
                       greater<pair<int, pii>>>
            minheap;
        int m = grid.size(), n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));

        minheap.push(make_pair(grid[0][0], make_pair(0, 0)));
        visited[0][0] = true;
        vector<int> dir = {-1, 0, 1, 0, -1};
        int count = 0;

        for (int query : sorted_queries) {
            while (!minheap.empty()) {
                pair<int, pii> cur = minheap.top();
                minheap.pop();
                int val = cur.first, x = cur.second.first,
                    y = cur.second.second;
                if (val >= query) {
                    minheap.push(cur);
                    break;
                }
                count++;

                for (int i = 0; i < 4; i++) {
                    int newX = x + dir[i];
                    int newY = y + dir[i + 1];
                    if (isValid(newX, newY, m, n) and !visited[newX][newY]) {
                        visited[newX][newY] = true;
                        minheap.push(
                            make_pair(grid[newX][newY], make_pair(newX, newY)));
                    }
                }
            }
            query_count[query] = count;
        }

        vector<int> res;
        for (int query : queries)
            res.push_back(query_count[query]);
        return res;
    }
};
